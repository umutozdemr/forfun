{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9fef164e-7b33-48e8-9ce8-2b5e97eafeed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "torch.manual_seed(1)\n",
    "import numpy as np\n",
    "import csv\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import torch.nn.functional as F\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1c62cc78-74a7-4997-9aee-fc8d27a6e633",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('Names.csv')\n",
    "\n",
    "namecol = data.iloc[:,1]\n",
    "countcol = data.iloc[:,4]\n",
    "total_list = {}\n",
    "for name, count in zip(namecol, countcol):\n",
    "    if name in total_list:\n",
    "        total_list[name] += count \n",
    "    else:\n",
    "        total_list[name] = count\n",
    "\n",
    "\n",
    "final_list = [[name, total] for name, total in total_list.items()]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e465e28b-492e-4b3e-8cc0-4fa0526d9498",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "93889"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(final_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "83e282c4-7ecb-40df-9c95-b7ccb5dc1099",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3607"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#randomaf normalized weights for char pair in the future\n",
    "final_listx = [row for row in final_list if row[-1] >= 5000]\n",
    "\n",
    "len(final_listx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7f175b60-bb19-4228-90fb-ca47d69347a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z', 0: '.'}\n"
     ]
    }
   ],
   "source": [
    "# build the vocabulary of characters and mappings to/from integers\n",
    "chars = sorted(list(set(''.join(namecol).lower())))\n",
    "stoi = {s:i+1 for i,s in enumerate(chars)}\n",
    "stoi['.'] = 0\n",
    "itos = {i:s for s,i in stoi.items()}\n",
    "vocab_size = len(itos)\n",
    "print(itos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "25e335b0-bce2-42f1-832c-cb645bd77778",
   "metadata": {},
   "outputs": [],
   "source": [
    "def build_dataset(words):  \n",
    "  X, Y = [], []\n",
    "  for w in words:\n",
    "\n",
    "    #print(w)\n",
    "    context = [0] * block_size\n",
    "    for ch in w + '.':\n",
    "      ix = stoi[ch]\n",
    "      X.append(context)\n",
    "      Y.append(ix)\n",
    "      #print(''.join(itos[i] for i in context), '--->', itos[ix])\n",
    "      context = context[1:] + [ix] # crop and append\n",
    "\n",
    "  X = torch.tensor(X)\n",
    "  Y = torch.tensor(Y)\n",
    "  print(X.shape, Y.shape)\n",
    "  return X, Y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "64442361-f5cc-4773-ad64-8808c7b50585",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([19952, 3]) torch.Size([19952])\n",
      "torch.Size([2463, 3]) torch.Size([2463])\n",
      "torch.Size([2548, 3]) torch.Size([2548])\n"
     ]
    }
   ],
   "source": [
    "namecol1 = []\n",
    "block_size = 3\n",
    "for line in final_listx:\n",
    "    namecol1.append(line[0].lower())\n",
    "import random\n",
    "random.seed(42)\n",
    "random.shuffle(namecol1)\n",
    "n1 = int(0.8*len(namecol1))\n",
    "n2 = int(0.9*len(namecol1))\n",
    "\n",
    "Xtr, Ytr = build_dataset(namecol1[:n1])\n",
    "Xdev, Ydev = build_dataset(namecol1[n1:n2])\n",
    "Xte, Yte = build_dataset(namecol1[n2:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f9e04bad-2434-42c7-a80e-2e5d90ee66dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#cleaner look\n",
    "emb_dim = 10\n",
    "num_neuron = 300\n",
    "#first layer of nn\n",
    "W1 = torch.randn(block_size * emb_dim, num_neuron) * (5/3 / (block_size * emb_dim)**0.5)\n",
    "b1= torch.randn(num_neuron) * 0.01\n",
    "#second layer of nn\n",
    "W2 = torch.randn(num_neuron,vocab_size) * 0.01\n",
    "b2= torch.randn(vocab_size) * 0\n",
    "C = torch.randn((vocab_size,emb_dim))\n",
    "bnbias = torch.zeros((1,num_neuron))\n",
    "bngain = torch.ones((1,num_neuron))\n",
    "bnmean_running = torch.zeros((1,num_neuron))\n",
    "bnstd_running = torch.ones((1,num_neuron))\n",
    "params = [C, W1, b1, W2, b2, bnbias, bngain]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "54e28c64-790f-45c2-9ea7-b72cea195247",
   "metadata": {},
   "outputs": [],
   "source": [
    "for p in params:\n",
    "    p.requires_grad = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "4fd4a702-25af-4087-b7e0-369964ceacb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "lre = torch.linspace(-3,0,1000)\n",
    "lrs = 10**lre"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "069da811-eeac-4205-b3f1-bb83b296f4fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.490910530090332\n"
     ]
    }
   ],
   "source": [
    "#forwardpass with minibatch to use full dataset\n",
    "epoch = 1000\n",
    "alpha = 0.05\n",
    "batch_size = 642\n",
    "lossi = []\n",
    "lri = []\n",
    "for ep in range(epoch):\n",
    "    #minibatch\n",
    "    ix = torch.randint(0,Xtr.shape[0],(batch_size,))\n",
    "    Xi, Yi = Xtr[ix], Ytr[ix]\n",
    "    #forwardpass (with full dataset)\n",
    "    emb = C[Xi]\n",
    "    hr = emb.view(emb.shape[0],-1) @ W1 + b1\n",
    "    #trying batchnormalization for the first time pogs\n",
    "    bnmeani = hr.mean(0,keepdim=True)\n",
    "    bnstdi = hr.std(0,keepdim=True)\n",
    "    hr = bngain * (hr - bnmean_running) / bnstd_running  + bnbias\n",
    "\n",
    "    with torch.no_grad():\n",
    "        bnmean_running = 0.999 * bnmean_running + 0.001 * bnmeani\n",
    "        bnstd_running = 0.999 * bnstd_running + 0.001 * bnstdi\n",
    "    h = torch.tanh(hr) \n",
    "    logits = h @ W2 + b2 \n",
    "    loss = F.cross_entropy(logits,Yi)\n",
    "    \n",
    "    #backwardpass\n",
    "    for p in params:\n",
    "        p.grad = None\n",
    "    loss.backward()\n",
    "    #update learning rate\n",
    "    alpha = lrs[ep]\n",
    "    for p in params:\n",
    "        p.data -= alpha * p.grad\n",
    "    #tracking loss and learning rate\n",
    "    lri.append(lrs[ep])\n",
    "    lossi.append(loss.item())\n",
    "    \n",
    "print(loss.item())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "5648bb18-df2a-4465-95d7-f91d6b1d7167",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(2.1844, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#full model loss to compare with minibatch\n",
    "emb = C[Xtr] \n",
    "hr = emb.view(emb.shape[0],-1) @ W1 + b1\n",
    "#trying batchnormalization for the first time pogs\n",
    "bnmeani = hr.mean(0,keepdim=True)\n",
    "bnstdi = hr.std(0,keepdim=True)\n",
    "hr = bngain * (hr - bnmean_running) / bnstd_running  + bnbias\n",
    "\n",
    "with torch.no_grad():\n",
    "    bnmean_running = 0.999 * bnmean_running + 0.001 * bnmeani\n",
    "    bnstd_running = 0.999 * bnstd_running + 0.001 * bnstdi\n",
    "h = torch.tanh(hr) \n",
    "logits = h @ W2 + b2 \n",
    "loss = F.cross_entropy(logits,Ytr)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "92431955-0efd-4108-9413-83e6f68fe5ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor(2.1886, grad_fn=<NllLossBackward0>)"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#full model loss to compare with minibatch valset\n",
    "emb = C[Xdev] \n",
    "hr = emb.view(emb.shape[0],-1) @ W1 + b1\n",
    "#trying batchnormalization for the first time pogs\n",
    "bnmeani = hr.mean(0,keepdim=True)\n",
    "bnstdi = hr.std(0,keepdim=True)\n",
    "hr = bngain * (hr - bnmean_running) / bnstd_running  + bnbias\n",
    "\n",
    "with torch.no_grad():\n",
    "    bnmean_running = 0.999 * bnmean_running + 0.001 * bnmeani\n",
    "    bnstd_running = 0.999 * bnstd_running + 0.001 * bnstdi\n",
    "h = torch.tanh(hr) \n",
    "logits = h @ W2 + b2 \n",
    "loss = F.cross_entropy(logits,Ydev)\n",
    "loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "ae2eee93-eaea-44cd-b87f-a9f26a692538",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1c7d57865d0>]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(lri,lossi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "83af2d6a-d49f-4dfa-bafd-4578f3186c4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kticstam.\n",
      "knyras.\n",
      "tsa.\n",
      "tsmathka.\n",
      "tyka.\n",
      "dujandelmenna.\n",
      "fticbraamakky.\n",
      "jastafs.\n",
      "ssa.\n",
      "juryzce.\n",
      "kemmccola.\n",
      "cratandrikhko.\n",
      "tblas.\n",
      "mill.\n",
      "mkorith.\n",
      "mintcsckatallyl.\n",
      "cter.\n",
      "kdystt.\n",
      "marboctal.\n",
      "vsyn.\n"
     ]
    }
   ],
   "source": [
    "# sample from the model\n",
    "\n",
    "for _ in range(20):\n",
    "    \n",
    "    out = []\n",
    "    context = [0] * block_size # initialize with all ...\n",
    "    while True:\n",
    "      emb = C[torch.tensor([context])] # (1,block_size,d)\n",
    "      h = torch.tanh(emb.view(1, -1) @ W1 + b1)        \n",
    "      logits = h @ W2 + b2\n",
    "      probs = F.softmax(logits, dim=1)\n",
    "      ix = torch.multinomial(probs, num_samples=1).item()\n",
    "      context = context[1:] + [ix]\n",
    "      out.append(ix)\n",
    "      if ix == 0:\n",
    "        break\n",
    "    \n",
    "    print(''.join(itos[i] for i in out))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "91e62598-5a71-49f6-b59b-3b2cd4d287b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[6.3637e-01, 1.3863e-02, 9.2409e-04, 1.7187e-03, 4.3144e-03, 3.3276e-02,\n",
       "         6.2458e-03, 1.3203e-04, 4.4406e-02, 1.5550e-02, 1.4100e-04, 2.0508e-02,\n",
       "         5.2870e-02, 7.9947e-03, 3.2038e-02, 5.9464e-03, 1.6439e-05, 1.4618e-03,\n",
       "         1.9460e-02, 3.1061e-02, 1.0089e-02, 3.0187e-03, 1.8087e-02, 3.8609e-04,\n",
       "         2.7328e-06, 2.5031e-02, 1.5092e-02]], grad_fn=<SoftmaxBackward0>)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6535a951-ea5c-4113-9954-20d900a09825",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
